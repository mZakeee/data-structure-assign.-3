void radixsort(vector<int>& arr)
{
    int sz = arr.size();
 

    int max_val = *max_element(arr.begin(), arr.end());

    int d = digits(max_val);

    node** bins;

    bins = new node*[10];
 
    for (int i = 0; i < 10; i++)
        bins[i] = NULL;
 
    for (int i = 0; i < d; i++) {
        for (int j = 0; j < sz; j++) // bins updation
            insert(bins[(arr[j] / (int)pow(10, i)) % 10],
                   arr[j]);
 
        int x = 0, y = 0;
        while (x < 10) {
            while (bins[x] != NULL)
                arr[y++] = del(bins[x]);
            x++;
        }
    }
}

void insert(node*& head, int n)
{
    if (head == NULL) {
        head = create(n);
        return;
    }
 
    node* t = head;
    while (t->next != NULL)
        t = t->next;
    t->next = create(n);
}

int digits(int n)
{
    int i = 1;
    if (n < 10)
        return 1;
 
    while (n > (int)pow(10, i))
        i++;
    return i;
}



int main(){
vector<int> vect{ 10, 78, 3, 45, 61 , 13 };
radixsort(vect);

for (int i=0; i<n; i++)
    {
        cout << vect[i] << endl;
    }

}
